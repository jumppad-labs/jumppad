// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Nomad is an autogenerated mock type for the Nomad type
type Nomad struct {
	mock.Mock
}

// Create provides a mock function with given fields: files
func (_m *Nomad) Create(files []string) error {
	ret := _m.Called(files)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(files)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Endpoints provides a mock function with given fields: job, group, task
func (_m *Nomad) Endpoints(job string, group string, task string) ([]map[string]string, error) {
	ret := _m.Called(job, group, task)

	if len(ret) == 0 {
		panic("no return value specified for Endpoints")
	}

	var r0 []map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) ([]map[string]string, error)); ok {
		return rf(job, group, task)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) []map[string]string); ok {
		r0 = rf(job, group, task)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(job, group, task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HealthCheckAPI provides a mock function with given fields: _a0, _a1
func (_m *Nomad) HealthCheckAPI(_a0 context.Context, _a1 time.Duration) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for HealthCheckAPI")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// JobRunning provides a mock function with given fields: job
func (_m *Nomad) JobRunning(job string) (bool, error) {
	ret := _m.Called(job)

	if len(ret) == 0 {
		panic("no return value specified for JobRunning")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(job)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(job)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(job)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseJob provides a mock function with given fields: file
func (_m *Nomad) ParseJob(file string) ([]byte, error) {
	ret := _m.Called(file)

	if len(ret) == 0 {
		panic("no return value specified for ParseJob")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(file)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(file)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetConfig provides a mock function with given fields: address, port, nodes
func (_m *Nomad) SetConfig(address string, port int, nodes int) error {
	ret := _m.Called(address, port, nodes)

	if len(ret) == 0 {
		panic("no return value specified for SetConfig")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int, int) error); ok {
		r0 = rf(address, port, nodes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields: files
func (_m *Nomad) Stop(files []string) error {
	ret := _m.Called(files)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(files)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewNomad creates a new instance of Nomad. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNomad(t interface {
	mock.TestingT
	Cleanup(func())
}) *Nomad {
	mock := &Nomad{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
